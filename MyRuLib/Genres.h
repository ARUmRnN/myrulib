/////////////////////////////////////////////////////
// Generated By wxActiveRecordGenerator v 1.2.0-rc3
/////////////////////////////////////////////////////


#ifndef __GENRES_
#define __GENRES_

////@@begin gen include
#include "wxActiveRecord.h"
#include <wx/wx.h>
#include <wx/string.h>
#include <wx/datetime.h>

////@@end gen include

////@@begin custom include
////@@end custom include

////@@begin gen forward
class Genres;
class GenresRow;
class GenresRowSet;


////@@end gen forward

////@@begin custom forward
////@@end custom forward

////@@begin gen arClass
class Genres: public wxSqliteActiveRecord{
protected:
	GenresRow* RowFromResult(DatabaseResultSet* result);
public:
	Genres();
	Genres(const wxString& name,const wxString& server=wxEmptyString,const wxString& user=wxEmptyString,const wxString& password=wxEmptyString,const wxString& table=wxT("genres"));
	Genres(DatabaseLayer* database,const wxString& table=wxT("genres"));
	bool Create(const wxString& name,const wxString& server=wxEmptyString,const wxString& user=wxEmptyString,const wxString& password=wxEmptyString,const wxString& table=wxT("genres"));
	
	GenresRow* New();
	bool Delete(int key);

	
	GenresRow* IdBook(int key);

	GenresRow* Where(const wxString& whereClause);
	GenresRowSet* WhereSet(const wxString& whereClause,const wxString& orderBy=wxEmptyString);
	GenresRowSet* All(const wxString& orderBy=wxEmptyString); 

////@@begin custom arClass
public:



////@@end custom arClass
};
////@@end gen arClass

////@@begin gen arRow
class GenresRow: public wxActiveRecordRow{
public:
	GenresRow();
	GenresRow(const GenresRow& src);
	GenresRow(Genres* activeRecord);
	GenresRow(DatabaseLayer* database,const wxString& table=wxT("genres"));
	GenresRow& operator=(const GenresRow& src);
	bool GetFromResult(DatabaseResultSet* result);
public:
	wxString id_genre;
	int id_book;

public:
	
	
	bool Save();
	bool Delete();
	
	
////@@begin custom arRow
public:



////@@end custom arRow	

};
////@@end gen arRow

////@@begin gen arSet
class GenresRowSet: public wxActiveRecordRowSet{
public:
	GenresRowSet();
	GenresRowSet(wxActiveRecord* activeRecord);
	GenresRowSet(DatabaseLayer* database,const wxString& table=wxT("genres"));
	virtual GenresRow* Item(unsigned long item);
	
	virtual bool SaveAll();
	
	
protected:
	static int CMPFUNC_id_genre(wxActiveRecordRow** item1,wxActiveRecordRow** item2);
	static int CMPFUNC_id_book(wxActiveRecordRow** item1,wxActiveRecordRow** item2);
	static int CMPFUNC_global(wxActiveRecordRow** item1,wxActiveRecordRow** item2);
	virtual CMPFUNC_proto GetCmpFunc(const wxString& var) const;

////@@begin custom arSet
public:



////@@end custom arSet
};
////@@end gen arSet

#endif /* __GENRES_ */