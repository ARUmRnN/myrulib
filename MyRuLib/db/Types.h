/////////////////////////////////////////////////////
// Generated By wxActiveRecordGenerator v 1.2.0-rc3
/////////////////////////////////////////////////////


#ifndef __TYPES_
#define __TYPES_

////@@begin gen include
#include "wxActiveRecord.h"
#include <wx/wx.h>
#include <wx/string.h>
#include <wx/datetime.h>

////@@end gen include

////@@begin custom include
////@@end custom include

////@@begin gen forward
class Types;
class TypesRow;
class TypesRowSet;


////@@end gen forward

////@@begin custom forward
////@@end custom forward

////@@begin gen arClass
class Types: public wxSqliteActiveRecord{
protected:
	TypesRow* RowFromResult(DatabaseResultSet* result);
public:
	Types();
	Types(const wxString& name,const wxString& server=wxEmptyString,const wxString& user=wxEmptyString,const wxString& password=wxEmptyString,const wxString& table=wxT("types"));
	Types(DatabaseLayer* database,const wxString& table=wxT("types"));
	bool Create(const wxString& name,const wxString& server=wxEmptyString,const wxString& user=wxEmptyString,const wxString& password=wxEmptyString,const wxString& table=wxT("types"));

	TypesRow* New();
	bool Delete(wxString key);


	TypesRow* FileType(wxString key);

	TypesRow* Where(const wxString& whereClause);
	TypesRowSet* WhereSet(const wxString& whereClause,const wxString& orderBy=wxEmptyString);
	TypesRowSet* All(const wxString& orderBy=wxEmptyString);

////@@begin custom arClass
public:
////@@end custom arClass
};
////@@end gen arClass

////@@begin gen arRow
class TypesRow: public wxActiveRecordRow{
public:
	TypesRow();
	TypesRow(const TypesRow& src);
	TypesRow(Types* activeRecord);
	TypesRow(DatabaseLayer* database,const wxString& table=wxT("types"));
	TypesRow& operator=(const TypesRow& src);
	bool GetFromResult(DatabaseResultSet* result);
public:
	wxString convert;
	wxString file_type;
	wxString command;
	bool isOk;

public:


	bool Save();
	bool Delete();


////@@begin custom arRow
public:
////@@end custom arRow

};
////@@end gen arRow

////@@begin gen arSet
class TypesRowSet: public wxActiveRecordRowSet{
public:
	TypesRowSet();
	TypesRowSet(wxActiveRecord* activeRecord);
	TypesRowSet(DatabaseLayer* database,const wxString& table=wxT("types"));
	virtual TypesRow* Item(unsigned long item);

	virtual bool SaveAll();


protected:
	static int CMPFUNC_convert(wxActiveRecordRow** item1,wxActiveRecordRow** item2);
	static int CMPFUNC_file_type(wxActiveRecordRow** item1,wxActiveRecordRow** item2);
	static int CMPFUNC_command(wxActiveRecordRow** item1,wxActiveRecordRow** item2);
	static int CMPFUNC_global(wxActiveRecordRow** item1,wxActiveRecordRow** item2);
	virtual CMPFUNC_proto GetCmpFunc(const wxString& var) const;

////@@begin custom arSet
public:
////@@end custom arSet
};
////@@end gen arSet

#endif /* __TYPES_ */
