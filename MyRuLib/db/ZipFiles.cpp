/////////////////////////////////////////////////////
// Generated By wxActiveRecordGenerator v 1.2.0-rc3
/////////////////////////////////////////////////////

#include "ZipFiles.h"

/** ACTIVE_RECORD **/
ZipFiles::ZipFiles():wxSqliteActiveRecord(){
}

ZipFiles::ZipFiles(const wxString& name,const wxString& server,const wxString& user,const wxString& password,const wxString& table):wxSqliteActiveRecord(name,server,user,password,table){
}

ZipFiles::ZipFiles(DatabaseLayer* database,const wxString& table):wxSqliteActiveRecord(database,table){
}

bool ZipFiles::Create(const wxString& name,const wxString& server,const wxString& user,const wxString& password,const wxString& table){
	return wxSqliteActiveRecord::Create(name,server,user,password,table);
}

ZipFilesRow* ZipFiles::RowFromResult(DatabaseResultSet* result){
	ZipFilesRow* row=new ZipFilesRow(this);

	row->GetFromResult(result);

	return row;
}

ZipFilesRow* ZipFiles::New(){
	ZipFilesRow* newRow=new ZipFilesRow(this);
	garbageRows.Add(newRow);
	return newRow;
}
bool ZipFiles::Delete(int key){
	try{
		PreparedStatement* pStatement=m_database->PrepareStatement(wxString::Format(wxT("DELETE FROM %s WHERE file=?"),m_table.c_str()));
		pStatement->SetParamInt(1,key);
		pStatement->ExecuteUpdate();
		return true;
	}
	catch(DatabaseLayerException& e){
		throw(e);
		return false;
	}
}



ZipFilesRow* ZipFiles::File(int key){
	try{
		PreparedStatement* pStatement=m_database->PrepareStatement(wxString::Format(wxT("SELECT * FROM %s WHERE file=?"),m_table.c_str()));
		pStatement->SetParamInt(1,key);
		DatabaseResultSet* result= pStatement->ExecuteQuery();

		result->Next();
		ZipFilesRow* row=RowFromResult(result);
		garbageRows.Add(row);
		m_database->CloseResultSet(result);
		m_database->CloseStatement(pStatement);
		return row;
	}
	catch (DatabaseLayerException& e)
	{
		ProcessException(e);
		return NULL;
	}
}




ZipFilesRow* ZipFiles::Where(const wxString& whereClause){
	try{
		wxString prepStatement = wxString::Format(wxT("SELECT * FROM %s WHERE %s"),m_table.c_str(),whereClause.c_str());
		PreparedStatement* pStatement=m_database->PrepareStatement(prepStatement);
		DatabaseResultSet* result= pStatement->ExecuteQuery();

		if(!result->Next())
			return NULL;
		ZipFilesRow* row=RowFromResult(result);

		garbageRows.Add(row);
		m_database->CloseResultSet(result);
		m_database->CloseStatement(pStatement);
		return row;
	}
	catch (DatabaseLayerException& e)
	{
		ProcessException(e);
		return 0;
	}
}

ZipFilesRowSet* ZipFiles::WhereSet(const wxString& whereClause,const wxString& orderBy){
	ZipFilesRowSet* rowSet=new ZipFilesRowSet();
	try{
		wxString prepStatement=wxString::Format(wxT("SELECT * FROM %s WHERE %s"),m_table.c_str(),whereClause.c_str());
		if(!orderBy.IsEmpty())
			prepStatement+=wxT(" ORDER BY ")+orderBy;
		PreparedStatement* pStatement=m_database->PrepareStatement(prepStatement);
		DatabaseResultSet* result= pStatement->ExecuteQuery();

		if(result){
			while(result->Next()){
				rowSet->Add(RowFromResult(result));
			}
		}

		garbageRowSets.Add(rowSet);
		m_database->CloseResultSet(result);
		m_database->CloseStatement(pStatement);
		return rowSet;

	}
	catch (DatabaseLayerException& e)
	{
		ProcessException(e);
		return 0;
	}
}


ZipFilesRowSet* ZipFiles::All(const wxString& orderBy){
	ZipFilesRowSet* rowSet=new ZipFilesRowSet();
	try{
		wxString prepStatement=wxString::Format(wxT("SELECT * FROM %s"),m_table.c_str());
		if(!orderBy.IsEmpty())
			prepStatement+=wxT(" ORDER BY ")+orderBy;
		PreparedStatement* pStatement=m_database->PrepareStatement(prepStatement);

		DatabaseResultSet* result= pStatement->ExecuteQuery();

		if(result){
			while(result->Next()){
				rowSet->Add(RowFromResult(result));
			}
		}
		garbageRowSets.Add(rowSet);
		m_database->CloseResultSet(result);
		m_database->CloseStatement(pStatement);
		return rowSet;

	}
	catch (DatabaseLayerException& e)
	{
		ProcessException(e);
		return 0;
	}
}

/** END ACTIVE RECORD **/

/** ACTIVE RECORD ROW **/

ZipFilesRow::ZipFilesRow():wxActiveRecordRow(){
	newRow=true;
}

ZipFilesRow::ZipFilesRow(ZipFiles* activeRecord):wxActiveRecordRow(activeRecord){
	newRow=true;
}

ZipFilesRow::ZipFilesRow(const ZipFilesRow& src){
	if(&src==this)
		return;
	newRow=src.newRow;

	path=src.path;
	file=src.file;

}

ZipFilesRow::ZipFilesRow(DatabaseLayer* database,const wxString& table):wxActiveRecordRow(database,table){
	newRow=true;
}


ZipFilesRow& ZipFilesRow::operator=(const ZipFilesRow& src){
	if(&src==this)
		return *this;
	newRow=src.newRow;

	path=src.path;
	file=src.file;


	return *this;
}

bool ZipFilesRow::GetFromResult(DatabaseResultSet* result){

	newRow=false;
		path=result->GetResultString(wxT("path"));
	file=result->GetResultInt(wxT("file"));


	return true;
}


bool ZipFilesRow::Save(){
	try{
		if(newRow){
			PreparedStatement* pStatement=m_database->PrepareStatement(wxString::Format(wxT("INSERT INTO %s (path,file) VALUES (?,?)"),m_table.c_str()));
			pStatement->SetParamString(1,path);
			pStatement->SetParamInt(2,file);
			pStatement->RunQuery();
			m_database->CloseStatement(pStatement);


			newRow=false;
		}
		else{
			PreparedStatement* pStatement=m_database->PrepareStatement(wxString::Format(wxT("UPDATE %s SET path=? WHERE file=?"),m_table.c_str()));
			pStatement->SetParamString(1,path);
			pStatement->SetParamInt(2,file);
			pStatement->RunQuery();
			m_database->CloseStatement(pStatement);

		}

		return true;
	}
	catch (DatabaseLayerException& e)
	{
		wxActiveRecord::ProcessException(e);
		return false;
	}
}

bool ZipFilesRow::Delete(){
	try{
		PreparedStatement* pStatement=m_database->PrepareStatement(wxString::Format(wxT("DELETE FROM %s WHERE file=?"),m_table.c_str()));
		pStatement->SetParamInt(1,file);
		pStatement->ExecuteUpdate();
		return true;
	}
	catch(DatabaseLayerException& e){
		throw(e);
		return false;
	}
}





/** END ACTIVE RECORD ROW **/

/** ACTIVE RECORD ROW SET **/

ZipFilesRowSet::ZipFilesRowSet():wxActiveRecordRowSet(){
}

ZipFilesRowSet::ZipFilesRowSet(wxActiveRecord* activeRecord):wxActiveRecordRowSet(activeRecord){
}

ZipFilesRowSet::ZipFilesRowSet(DatabaseLayer* database,const wxString& table):wxActiveRecordRowSet(database,table){
}

ZipFilesRow* ZipFilesRowSet::Item(unsigned long item){
	return (ZipFilesRow*)wxActiveRecordRowSet::Item(item);
}


bool ZipFilesRowSet::SaveAll(){
	try{
		m_database->BeginTransaction();
		for(unsigned long i=0;i<Count();i++)
			Item(i)->Save();
		m_database->Commit();
		return true;
	}
	catch (DatabaseLayerException& e)
	{
		m_database->RollBack();
		wxActiveRecord::ProcessException(e);
		return false;
	}
}


int ZipFilesRowSet::CMPFUNC_path(wxActiveRecordRow** item1,wxActiveRecordRow** item2){
	ZipFilesRow** m_item1=(ZipFilesRow**)item1;
	ZipFilesRow** m_item2=(ZipFilesRow**)item2;
	return (*m_item1)->path.Cmp((*m_item2)->path);
}

int ZipFilesRowSet::CMPFUNC_file(wxActiveRecordRow** item1,wxActiveRecordRow** item2){
	ZipFilesRow** m_item1=(ZipFilesRow**)item1;
	ZipFilesRow** m_item2=(ZipFilesRow**)item2;
	if((*m_item1)->file<(*m_item2)->file)
		return -1;
	else if((*m_item1)->file>(*m_item2)->file)
		return 1;
	else
		return 0;
}

CMPFUNC_proto ZipFilesRowSet::GetCmpFunc(const wxString& var) const{
	if(var==wxT("path"))
		return (CMPFUNC_proto)CMPFUNC_path;
	else if(var==wxT("file"))
		return (CMPFUNC_proto)CMPFUNC_file;
	else
	return (CMPFUNC_proto)CMPFUNC_default;
}



/** END ACTIVE RECORD ROW SET **/

////@@begin custom implementations





////@@end custom implementations
