/////////////////////////////////////////////////////
// Generated By wxActiveRecordGenerator v 1.2.0-rc3
/////////////////////////////////////////////////////

#include "Types.h"

/** ACTIVE_RECORD **/
Types::Types():wxSqliteActiveRecord(){
}

Types::Types(const wxString& name,const wxString& server,const wxString& user,const wxString& password,const wxString& table):wxSqliteActiveRecord(name,server,user,password,table){
}

Types::Types(DatabaseLayer* database,const wxString& table):wxSqliteActiveRecord(database,table){
}

bool Types::Create(const wxString& name,const wxString& server,const wxString& user,const wxString& password,const wxString& table){
	return wxSqliteActiveRecord::Create(name,server,user,password,table);
}

TypesRow* Types::RowFromResult(DatabaseResultSet* result){
	TypesRow* row=new TypesRow(this);
	row->GetFromResult(result);
	return row;
}

TypesRow* Types::New(){
	TypesRow* newRow=new TypesRow(this);
	garbageRows.Add(newRow);
	return newRow;
}

bool Types::Delete(wxString key){
	PreparedStatement* pStatement=m_database->PrepareStatement(wxString::Format(wxT("DELETE FROM %s WHERE file_type=?"),m_table.c_str()));
    if (!pStatement) return false;
    pStatement->SetParamString(1,key);
    pStatement->ExecuteUpdate();
    return true;
}

TypesRow* Types::FileType(wxString key){
    PreparedStatement* pStatement=m_database->PrepareStatement(wxString::Format(wxT("SELECT * FROM %s WHERE file_type=?"),m_table.c_str()));
    pStatement->SetParamString(1,key);
    if (!pStatement) return NULL;
    DatabaseResultSet* result= pStatement->ExecuteQuery();

    TypesRow* row = NULL;
    bool ok = result && result->Next();
    if (ok) {
        row = RowFromResult(result);
        garbageRows.Add(row);
    }
    m_database->CloseResultSet(result);
    m_database->CloseStatement(pStatement);
    return row;
}

TypesRow* Types::Where(const wxString& whereClause){
    wxString prepStatement = wxString::Format(wxT("SELECT * FROM %s WHERE %s"),m_table.c_str(),whereClause.c_str());
    PreparedStatement* pStatement=m_database->PrepareStatement(prepStatement);
    if (!pStatement) return NULL;
    DatabaseResultSet* result= pStatement->ExecuteQuery();

    TypesRow* row = NULL;
    bool ok = result && result->Next();
    if (ok) {
        row = RowFromResult(result);
        garbageRows.Add(row);
    }
    m_database->CloseResultSet(result);
    m_database->CloseStatement(pStatement);
    return row;
}

TypesRowSet* Types::WhereSet(const wxString& whereClause,const wxString& orderBy){
	TypesRowSet* rowSet = new TypesRowSet();

    wxString prepStatement=wxString::Format(wxT("SELECT * FROM %s WHERE %s"),m_table.c_str(),whereClause.c_str());
    if(!orderBy.IsEmpty()) prepStatement+=wxT(" ORDER BY ")+orderBy;
    PreparedStatement* pStatement=m_database->PrepareStatement(prepStatement);
    if (!pStatement) return rowSet;
    DatabaseResultSet* result= pStatement->ExecuteQuery();

    if(result){
        while(result->Next()){
            rowSet->Add(RowFromResult(result));
        }
    }

	garbageRowSets.Add(rowSet);
	m_database->CloseResultSet(result);
	m_database->CloseStatement(pStatement);
	return rowSet;
}

TypesRowSet* Types::All(const wxString& orderBy){
	TypesRowSet* rowSet=new TypesRowSet();
    wxString prepStatement=wxString::Format(wxT("SELECT * FROM %s"),m_table.c_str());
    if(!orderBy.IsEmpty()) prepStatement+=wxT(" ORDER BY ")+orderBy;
    PreparedStatement* pStatement=m_database->PrepareStatement(prepStatement);
    if (!pStatement) return NULL;

    DatabaseResultSet* result= pStatement->ExecuteQuery();

    if(result){
        while(result->Next()){
            rowSet->Add(RowFromResult(result));
        }
    }
    garbageRowSets.Add(rowSet);
    m_database->CloseResultSet(result);
    m_database->CloseStatement(pStatement);
    return rowSet;
}

/** END ACTIVE RECORD **/

/** ACTIVE RECORD ROW **/

TypesRow::TypesRow():wxActiveRecordRow(){
	newRow=true;
}

TypesRow::TypesRow(Types* activeRecord):wxActiveRecordRow(activeRecord){
	newRow=true;
}

TypesRow::TypesRow(const TypesRow& src){
	if(&src==this)
		return;
	newRow=src.newRow;

	convert=src.convert;
	file_type=src.file_type;
	command=src.command;
}

TypesRow::TypesRow(DatabaseLayer* database,const wxString& table):wxActiveRecordRow(database,table){
	newRow=true;
}


TypesRow& TypesRow::operator=(const TypesRow& src){
	if(&src==this)
		return *this;
	newRow=src.newRow;

	convert=src.convert;
	file_type=src.file_type;
	command=src.command;


	return *this;
}

bool TypesRow::GetFromResult(DatabaseResultSet* result){

	newRow=false;
		convert=result->GetResultString(wxT("convert"));
	file_type=result->GetResultString(wxT("file_type"));
	command=result->GetResultString(wxT("command"));


	return true;
}


bool TypesRow::Save(){
    if(newRow){
        PreparedStatement* pStatement=m_database->PrepareStatement(wxString::Format(wxT("INSERT INTO %s (file_type, convert,command) VALUES (?,?,?)"),m_table.c_str()));
        if (!pStatement) return false;
        pStatement->SetParamString(1,file_type);
        pStatement->SetParamString(2,convert);
        pStatement->SetParamString(3,command);
        pStatement->RunQuery();
        m_database->CloseStatement(pStatement);
        newRow=false;
    }
    else{
        PreparedStatement* pStatement=m_database->PrepareStatement(wxString::Format(wxT("UPDATE %s SET convert=?,command=? WHERE file_type=?"),m_table.c_str()));
        if (!pStatement) return false;
        pStatement->SetParamString(1,convert);
        pStatement->SetParamString(3,file_type);
        pStatement->SetParamString(2,command);
        pStatement->RunQuery();
        m_database->CloseStatement(pStatement);
    }
    return true;
}

bool TypesRow::Delete(){
    PreparedStatement* pStatement=m_database->PrepareStatement(wxString::Format(wxT("DELETE FROM %s WHERE file_type=?"),m_table.c_str()));
    if (!pStatement) return false;
    pStatement->SetParamString(1,file_type);
    pStatement->ExecuteUpdate();
    return true;
}

/** END ACTIVE RECORD ROW **/

/** ACTIVE RECORD ROW SET **/

TypesRowSet::TypesRowSet():wxActiveRecordRowSet(){
}

TypesRowSet::TypesRowSet(wxActiveRecord* activeRecord):wxActiveRecordRowSet(activeRecord){
}

TypesRowSet::TypesRowSet(DatabaseLayer* database,const wxString& table):wxActiveRecordRowSet(database,table){
}

TypesRow* TypesRowSet::Item(unsigned long item){
	return (TypesRow*)wxActiveRecordRowSet::Item(item);
}

int TypesRowSet::CMPFUNC_convert(wxActiveRecordRow** item1,wxActiveRecordRow** item2){
	TypesRow** m_item1=(TypesRow**)item1;
	TypesRow** m_item2=(TypesRow**)item2;
	return (*m_item1)->convert.Cmp((*m_item2)->convert);
}

int TypesRowSet::CMPFUNC_file_type(wxActiveRecordRow** item1,wxActiveRecordRow** item2){
	TypesRow** m_item1=(TypesRow**)item1;
	TypesRow** m_item2=(TypesRow**)item2;
	return (*m_item1)->file_type.Cmp((*m_item2)->file_type);
}

int TypesRowSet::CMPFUNC_command(wxActiveRecordRow** item1,wxActiveRecordRow** item2){
	TypesRow** m_item1=(TypesRow**)item1;
	TypesRow** m_item2=(TypesRow**)item2;
	return (*m_item1)->command.Cmp((*m_item2)->command);
}

CMPFUNC_proto TypesRowSet::GetCmpFunc(const wxString& var) const{
	if(var==wxT("convert"))
		return (CMPFUNC_proto)CMPFUNC_convert;
	else if(var==wxT("file_type"))
		return (CMPFUNC_proto)CMPFUNC_file_type;
	else if(var==wxT("command"))
		return (CMPFUNC_proto)CMPFUNC_command;
	else
	return (CMPFUNC_proto)CMPFUNC_default;
}



/** END ACTIVE RECORD ROW SET **/

////@@begin custom implementations

////@@end custom implementations
