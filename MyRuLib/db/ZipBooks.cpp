/////////////////////////////////////////////////////
// Generated By wxActiveRecordGenerator v 1.2.0-rc3
/////////////////////////////////////////////////////

#include "ZipBooks.h"

/** ACTIVE_RECORD **/
ZipBooks::ZipBooks():wxSqliteActiveRecord(){
}

ZipBooks::ZipBooks(const wxString& name,const wxString& server,const wxString& user,const wxString& password,const wxString& table):wxSqliteActiveRecord(name,server,user,password,table){
}

ZipBooks::ZipBooks(DatabaseLayer* database,const wxString& table):wxSqliteActiveRecord(database,table){
}

bool ZipBooks::Create(const wxString& name,const wxString& server,const wxString& user,const wxString& password,const wxString& table){
	return wxSqliteActiveRecord::Create(name,server,user,password,table);
}

ZipBooksRow* ZipBooks::RowFromResult(DatabaseResultSet* result){
	ZipBooksRow* row=new ZipBooksRow(this);
	row->GetFromResult(result);
	return row;
}

ZipBooksRow* ZipBooks::New(){
	ZipBooksRow* newRow=new ZipBooksRow(this);
	garbageRows.Add(newRow);
	return newRow;
}

bool ZipBooks::Delete(wxString key){
    PreparedStatement* pStatement=m_database->PrepareStatement(wxString::Format(wxT("DELETE FROM %s WHERE book=?"),m_table.c_str()));
    if (!pStatement) return false;
    pStatement->SetParamString(1,key);
    pStatement->ExecuteUpdate();
    return true;
}

ZipBooksRow* ZipBooks::Book(const wxString& key){
    PreparedStatement* pStatement=m_database->PrepareStatement(wxString::Format(wxT("SELECT * FROM %s WHERE book=?"),m_table.c_str()));
    if (!pStatement) return NULL;
    pStatement->SetParamString(1,key);
    DatabaseResultSet* result= pStatement->ExecuteQuery();

    ZipBooksRow* row = NULL;
    bool ok = result && result->Next();
    if (ok) {
        row = RowFromResult(result);
        garbageRows.Add(row);
    }
    m_database->CloseResultSet(result);
    m_database->CloseStatement(pStatement);
    return row;
}

ZipBooksRow* ZipBooks::Where(const wxString& whereClause){
    wxString prepStatement = wxString::Format(wxT("SELECT * FROM %s WHERE %s"),m_table.c_str(),whereClause.c_str());
    PreparedStatement* pStatement=m_database->PrepareStatement(prepStatement);
    if (!pStatement) return NULL;
    DatabaseResultSet* result= pStatement->ExecuteQuery();

    ZipBooksRow* row = NULL;
    bool ok = result && result->Next();
    if (ok) {
        row = RowFromResult(result);
        garbageRows.Add(row);
    }
    m_database->CloseResultSet(result);
    m_database->CloseStatement(pStatement);
    return row;
}

ZipBooksRowSet* ZipBooks::WhereSet(const wxString& whereClause,const wxString& orderBy){
	ZipBooksRowSet* rowSet = new ZipBooksRowSet();
    wxString prepStatement=wxString::Format(wxT("SELECT * FROM %s WHERE %s"),m_table.c_str(),whereClause.c_str());
    if(!orderBy.IsEmpty()) prepStatement+=wxT(" ORDER BY ")+orderBy;
    PreparedStatement* pStatement=m_database->PrepareStatement(prepStatement);
    if (!pStatement) return rowSet;
    DatabaseResultSet* result= pStatement->ExecuteQuery();

    if(result){
        while(result->Next()){
            rowSet->Add(RowFromResult(result));
        }
    }

	garbageRowSets.Add(rowSet);
	m_database->CloseResultSet(result);
	m_database->CloseStatement(pStatement);
	return rowSet;
}

/** END ACTIVE RECORD **/

/** ACTIVE RECORD ROW **/

ZipBooksRow::ZipBooksRow():wxActiveRecordRow(){
	newRow=true;
}

ZipBooksRow::ZipBooksRow(ZipBooks* activeRecord):wxActiveRecordRow(activeRecord){
	newRow=true;
}

ZipBooksRow::ZipBooksRow(const ZipBooksRow& src){
	if(&src==this)
		return;
	newRow=src.newRow;

	book=src.book;
	file=src.file;

}

ZipBooksRow::ZipBooksRow(DatabaseLayer* database,const wxString& table):wxActiveRecordRow(database,table){
	newRow=true;
}


ZipBooksRow& ZipBooksRow::operator=(const ZipBooksRow& src){
	if(&src==this)
		return *this;
	newRow=src.newRow;

	book=src.book;
	file=src.file;


	return *this;
}

bool ZipBooksRow::GetFromResult(DatabaseResultSet* result){

	newRow=false;
		book=result->GetResultString(wxT("book"));
	file=result->GetResultInt(wxT("file"));


	return true;
}


bool ZipBooksRow::Save(){
    if(newRow){
        PreparedStatement* pStatement=m_database->PrepareStatement(wxString::Format(wxT("INSERT INTO %s (book,file) VALUES (?,?)"),m_table.c_str()));
        if (!pStatement) return false;
        pStatement->SetParamString(1,book);
        pStatement->SetParamInt(2,file);
        pStatement->RunQuery();
        m_database->CloseStatement(pStatement);
        newRow=false;
    }
    else{
        PreparedStatement* pStatement=m_database->PrepareStatement(wxString::Format(wxT("UPDATE %s SET ,file=? WHERE book=?"),m_table.c_str()));
        if (!pStatement) return false;
        pStatement->SetParamString(2,book);
        pStatement->SetParamInt(1,file);
        pStatement->RunQuery();
        m_database->CloseStatement(pStatement);
    }
    return true;
}

bool ZipBooksRow::Delete(){
    PreparedStatement* pStatement=m_database->PrepareStatement(wxString::Format(wxT("DELETE FROM %s WHERE book=?"),m_table.c_str()));
    if (!pStatement) return false;
    pStatement->SetParamString(1,book);
    pStatement->ExecuteUpdate();
    return true;
}

/** END ACTIVE RECORD ROW **/

/** ACTIVE RECORD ROW SET **/

ZipBooksRowSet::ZipBooksRowSet():wxActiveRecordRowSet(){
}

ZipBooksRowSet::ZipBooksRowSet(wxActiveRecord* activeRecord):wxActiveRecordRowSet(activeRecord){
}

ZipBooksRowSet::ZipBooksRowSet(DatabaseLayer* database,const wxString& table):wxActiveRecordRowSet(database,table){
}

ZipBooksRow* ZipBooksRowSet::Item(unsigned long item){
	return (ZipBooksRow*)wxActiveRecordRowSet::Item(item);
}

int ZipBooksRowSet::CMPFUNC_book(wxActiveRecordRow** item1,wxActiveRecordRow** item2){
	ZipBooksRow** m_item1=(ZipBooksRow**)item1;
	ZipBooksRow** m_item2=(ZipBooksRow**)item2;
	return (*m_item1)->book.Cmp((*m_item2)->book);
}

int ZipBooksRowSet::CMPFUNC_file(wxActiveRecordRow** item1,wxActiveRecordRow** item2){
	ZipBooksRow** m_item1=(ZipBooksRow**)item1;
	ZipBooksRow** m_item2=(ZipBooksRow**)item2;
	if((*m_item1)->file<(*m_item2)->file)
		return -1;
	else if((*m_item1)->file>(*m_item2)->file)
		return 1;
	else
		return 0;
}

CMPFUNC_proto ZipBooksRowSet::GetCmpFunc(const wxString& var) const{
	if(var==wxT("book"))
		return (CMPFUNC_proto)CMPFUNC_book;
	else if(var==wxT("file"))
		return (CMPFUNC_proto)CMPFUNC_file;
	else
	return (CMPFUNC_proto)CMPFUNC_default;
}



/** END ACTIVE RECORD ROW SET **/

////@@begin custom implementations





////@@end custom implementations
