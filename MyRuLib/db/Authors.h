/////////////////////////////////////////////////////
// Generated By wxActiveRecordGenerator v 1.2.0-rc3
/////////////////////////////////////////////////////


#ifndef __AUTHORS_
#define __AUTHORS_

////@@begin gen include
#include "wxActiveRecord.h"
#include <wx/wx.h>
#include <wx/string.h>
#include <wx/datetime.h>
#include "Books.h"
#include "Bookseq.h"

////@@end gen include

////@@begin custom include
////@@end custom include

////@@begin gen forward
class Authors;
class AuthorsRow;
class AuthorsRowSet;

class Books;
class BooksRow;
class BooksRowSet;

class Bookseq;
class BookseqRow;
class BookseqRowSet;

////@@end gen forward

////@@begin custom forward
////@@end custom forward

////@@begin gen arClass
class Authors: public wxSqliteActiveRecord{
protected:
	AuthorsRow* RowFromResult(DatabaseResultSet* result);
public:
	Authors();
	Authors(const wxString& name,const wxString& server=wxEmptyString,const wxString& user=wxEmptyString,const wxString& password=wxEmptyString,const wxString& table=wxT("authors"));
	Authors(DatabaseLayer* database,const wxString& table=wxT("authors"));
	bool Create(const wxString& name,const wxString& server=wxEmptyString,const wxString& user=wxEmptyString,const wxString& password=wxEmptyString,const wxString& table=wxT("authors"));

	AuthorsRow* New();
	bool Delete(int key);


	AuthorsRow* Id(int key);
	AuthorsRow* Where(const wxString& whereClause);
	AuthorsRowSet* WhereSet(const wxString& whereClause,const wxString& orderBy=wxEmptyString);
	AuthorsRowSet* All(const wxString& orderBy=wxEmptyString);

////@@begin custom arClass
public:
////@@end custom arClass
};
////@@end gen arClass

////@@begin gen arRow
class AuthorsRow: public wxActiveRecordRow{
public:
	AuthorsRow();
	AuthorsRow(const AuthorsRow& src);
	AuthorsRow(Authors* activeRecord);
	AuthorsRow(DatabaseLayer* database,const wxString& table=wxT("authors"));
	AuthorsRow& operator=(const AuthorsRow& src);
	bool GetFromResult(DatabaseResultSet* result);
public:
	wxString full_name;
	wxString description;
	int id;
	wxString first_name;
	wxString search_name;
	wxString letter;
	wxString middle_name;
	wxString last_name;

public:
	BooksRowSet* GetBooks(const wxString& orderBy=wxEmptyString);
	BookseqRowSet* GetBookseqs(const wxString& orderBy=wxEmptyString);

	bool Save();
	bool Delete();


////@@begin custom arRow
public:
////@@end custom arRow

};
////@@end gen arRow

////@@begin gen arSet
class AuthorsRowSet: public wxActiveRecordRowSet{
public:
	AuthorsRowSet();
	AuthorsRowSet(wxActiveRecord* activeRecord);
	AuthorsRowSet(DatabaseLayer* database,const wxString& table=wxT("authors"));
	virtual AuthorsRow* Item(unsigned long item);

protected:
	static int CMPFUNC_full_name(wxActiveRecordRow** item1,wxActiveRecordRow** item2);
	static int CMPFUNC_description(wxActiveRecordRow** item1,wxActiveRecordRow** item2);
	static int CMPFUNC_id(wxActiveRecordRow** item1,wxActiveRecordRow** item2);
	static int CMPFUNC_first_name(wxActiveRecordRow** item1,wxActiveRecordRow** item2);
	static int CMPFUNC_search_name(wxActiveRecordRow** item1,wxActiveRecordRow** item2);
	static int CMPFUNC_letter(wxActiveRecordRow** item1,wxActiveRecordRow** item2);
	static int CMPFUNC_middle_name(wxActiveRecordRow** item1,wxActiveRecordRow** item2);
	static int CMPFUNC_last_name(wxActiveRecordRow** item1,wxActiveRecordRow** item2);
	static int CMPFUNC_global(wxActiveRecordRow** item1,wxActiveRecordRow** item2);
	virtual CMPFUNC_proto GetCmpFunc(const wxString& var) const;

////@@begin custom arSet
public:
////@@end custom arSet
};
////@@end gen arSet

#endif /* __AUTHORS_ */
