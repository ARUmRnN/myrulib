/////////////////////////////////////////////////////
// Generated By wxActiveRecordGenerator v 1.2.0-rc3
/////////////////////////////////////////////////////

#include "Authors.h"

/** ACTIVE_RECORD **/
Authors::Authors():wxSqliteActiveRecord(){
}

Authors::Authors(const wxString& name,const wxString& server,const wxString& user,const wxString& password,const wxString& table):wxSqliteActiveRecord(name,server,user,password,table){
}

Authors::Authors(DatabaseLayer* database,const wxString& table):wxSqliteActiveRecord(database,table){
}

bool Authors::Create(const wxString& name,const wxString& server,const wxString& user,const wxString& password,const wxString& table){
	return wxSqliteActiveRecord::Create(name,server,user,password,table);
}

AuthorsRow* Authors::RowFromResult(DatabaseResultSet* result){
	AuthorsRow* row=new AuthorsRow(this);
	
	row->GetFromResult(result);
	
	return row;
}

AuthorsRow* Authors::New(){
	AuthorsRow* newRow=new AuthorsRow(this);
	garbageRows.Add(newRow);
	return newRow;
}
bool Authors::Delete(int key){
	try{
		PreparedStatement* pStatement=m_database->PrepareStatement(wxString::Format(wxT("DELETE FROM %s WHERE id=?"),m_table.c_str()));
		pStatement->SetParamInt(1,key);
		pStatement->ExecuteUpdate();
		return true;
	}
	catch(DatabaseLayerException& e){
		throw(e);
		return false;
	}
}



AuthorsRow* Authors::Id(int key){
	try{
		PreparedStatement* pStatement=m_database->PrepareStatement(wxString::Format(wxT("SELECT * FROM %s WHERE id=?"),m_table.c_str()));
		pStatement->SetParamInt(1,key);
		DatabaseResultSet* result= pStatement->ExecuteQuery();

		if(!result->Next())
			return NULL;
		AuthorsRow* row=RowFromResult(result);
		garbageRows.Add(row);
		m_database->CloseResultSet(result);
		m_database->CloseStatement(pStatement);
		return row;
	}
	catch (DatabaseLayerException& e)
	{
		ProcessException(e);
		return NULL;
	}
}

AuthorsRow* Authors::Where(const wxString& whereClause){
	try{
		wxString prepStatement = wxString::Format(wxT("SELECT * FROM %s WHERE %s"),m_table.c_str(),whereClause.c_str());
		PreparedStatement* pStatement=m_database->PrepareStatement(prepStatement);
		DatabaseResultSet* result= pStatement->ExecuteQuery();
		
		if(!result->Next())
			return NULL;
		AuthorsRow* row=RowFromResult(result);
		
		garbageRows.Add(row);
		m_database->CloseResultSet(result);
		m_database->CloseStatement(pStatement);						
		return row;
	}
	catch (DatabaseLayerException& e)
	{
		ProcessException(e);
		return 0;
	}
}

AuthorsRowSet* Authors::WhereSet(const wxString& whereClause,const wxString& orderBy){
	AuthorsRowSet* rowSet=new AuthorsRowSet();
	try{
		wxString prepStatement=wxString::Format(wxT("SELECT * FROM %s WHERE %s"),m_table.c_str(),whereClause.c_str());
		if(!orderBy.IsEmpty())
			prepStatement+=wxT(" ORDER BY ")+orderBy;
		PreparedStatement* pStatement=m_database->PrepareStatement(prepStatement);
		DatabaseResultSet* result= pStatement->ExecuteQuery();
		
		if(result){
			while(result->Next()){
				rowSet->Add(RowFromResult(result));
			}
		}
		
		garbageRowSets.Add(rowSet);
		m_database->CloseResultSet(result);
		m_database->CloseStatement(pStatement);	
		return rowSet;
		
	}
	catch (DatabaseLayerException& e)
	{
		ProcessException(e);
		return 0;
	}
}


AuthorsRowSet* Authors::All(const wxString& orderBy){
	AuthorsRowSet* rowSet=new AuthorsRowSet();
	try{
		wxString prepStatement=wxString::Format(wxT("SELECT * FROM %s"),m_table.c_str());
		if(!orderBy.IsEmpty())
			prepStatement+=wxT(" ORDER BY ")+orderBy;
		PreparedStatement* pStatement=m_database->PrepareStatement(prepStatement);
		
		DatabaseResultSet* result= pStatement->ExecuteQuery();
		
		if(result){
			while(result->Next()){
				rowSet->Add(RowFromResult(result));
			}
		}
		garbageRowSets.Add(rowSet);
		m_database->CloseResultSet(result);
		m_database->CloseStatement(pStatement);	
		return rowSet;
		
	}
	catch (DatabaseLayerException& e)
	{
		ProcessException(e);
		return 0;
	}
}

/** END ACTIVE RECORD **/

/** ACTIVE RECORD ROW **/

AuthorsRow::AuthorsRow():wxActiveRecordRow(){
	newRow=true;
}

AuthorsRow::AuthorsRow(Authors* activeRecord):wxActiveRecordRow(activeRecord){
	newRow=true;
}

AuthorsRow::AuthorsRow(const AuthorsRow& src){
	if(&src==this)
		return;
	newRow=src.newRow;
	
	full_name=src.full_name;
	description=src.description;
	id=src.id;
	first_name=src.first_name;
	search_name=src.search_name;
	letter=src.letter;
	middle_name=src.middle_name;
	last_name=src.last_name;

}

AuthorsRow::AuthorsRow(DatabaseLayer* database,const wxString& table):wxActiveRecordRow(database,table){
	newRow=true;
}
	

AuthorsRow& AuthorsRow::operator=(const AuthorsRow& src){
	if(&src==this)
		return *this;
	newRow=src.newRow;
	
	full_name=src.full_name;
	description=src.description;
	id=src.id;
	first_name=src.first_name;
	search_name=src.search_name;
	letter=src.letter;
	middle_name=src.middle_name;
	last_name=src.last_name;


	return *this;
}

bool AuthorsRow::GetFromResult(DatabaseResultSet* result){
	
	newRow=false;
		full_name=result->GetResultString(wxT("full_name"));
	description=result->GetResultString(wxT("description"));
	id=result->GetResultInt(wxT("id"));
	first_name=result->GetResultString(wxT("first_name"));
	search_name=result->GetResultString(wxT("search_name"));
	letter=result->GetResultString(wxT("letter"));
	middle_name=result->GetResultString(wxT("middle_name"));
	last_name=result->GetResultString(wxT("last_name"));


	return true;
}
	

bool AuthorsRow::Save(){
	try{
		if(newRow){
			PreparedStatement* pStatement=m_database->PrepareStatement(wxString::Format(wxT("INSERT INTO %s (full_name,description,first_name,search_name,letter,middle_name,last_name,id) VALUES (?,?,?,?,?,?,?,?)"),m_table.c_str()));
			pStatement->SetParamString(1,full_name);
			pStatement->SetParamString(2,description);
			pStatement->SetParamString(3,first_name);
			pStatement->SetParamString(4,search_name);
			pStatement->SetParamString(5,letter);
			pStatement->SetParamString(6,middle_name);
			pStatement->SetParamString(7,last_name);
			pStatement->SetParamInt(8,id);
			pStatement->RunQuery();
			m_database->CloseStatement(pStatement);

			
			newRow=false;
		}
		else{
			PreparedStatement* pStatement=m_database->PrepareStatement(wxString::Format(wxT("UPDATE %s SET full_name=?,description=?,first_name=?,search_name=?,letter=?,middle_name=?,last_name=? WHERE id=?"),m_table.c_str()));
			pStatement->SetParamString(1,full_name);
			pStatement->SetParamString(2,description);
			pStatement->SetParamInt(8,id);
			pStatement->SetParamString(3,first_name);
			pStatement->SetParamString(4,search_name);
			pStatement->SetParamString(5,letter);
			pStatement->SetParamString(6,middle_name);
			pStatement->SetParamString(7,last_name);
			pStatement->RunQuery();
			m_database->CloseStatement(pStatement);

		}
		
		return true;
	}
	catch (DatabaseLayerException& e)
	{
		wxActiveRecord::ProcessException(e);
		return false;
	}
}

bool AuthorsRow::Delete(){
	try{
		PreparedStatement* pStatement=m_database->PrepareStatement(wxString::Format(wxT("DELETE FROM %s WHERE id=?"),m_table.c_str()));
		pStatement->SetParamInt(1,id);
		pStatement->ExecuteUpdate();
		return true;
	}
	catch(DatabaseLayerException& e){
		throw(e);
		return false;
	}
}



BooksRowSet* AuthorsRow::GetBooks(const wxString& orderBy){
	BooksRowSet* set= new BooksRowSet(m_database,wxT("books"));
	wxString str_statement =wxT("SELECT * FROM books WHERE id_author=?");
	if(!orderBy.IsEmpty())
		str_statement+=wxT(" ORDER BY ")+orderBy;
	PreparedStatement* pStatement=m_database->PrepareStatement(str_statement);
	pStatement->SetParamInt(1,id);
	DatabaseResultSet* result= pStatement->ExecuteQuery();

	while(result->Next()){
		BooksRow* toAdd=new BooksRow(m_database,wxT("books"));
		toAdd->GetFromResult(result);
		set->Add(toAdd);
	}
	garbageRowSets.Add(set);
	m_database->CloseResultSet(result);
	m_database->CloseStatement(pStatement);
	return set;
}



/** END ACTIVE RECORD ROW **/

/** ACTIVE RECORD ROW SET **/

AuthorsRowSet::AuthorsRowSet():wxActiveRecordRowSet(){
}

AuthorsRowSet::AuthorsRowSet(wxActiveRecord* activeRecord):wxActiveRecordRowSet(activeRecord){
}

AuthorsRowSet::AuthorsRowSet(DatabaseLayer* database,const wxString& table):wxActiveRecordRowSet(database,table){
}

AuthorsRow* AuthorsRowSet::Item(unsigned long item){
	return (AuthorsRow*)wxActiveRecordRowSet::Item(item);
}


bool AuthorsRowSet::SaveAll(){
	try{
		m_database->BeginTransaction();
		for(unsigned long i=0;i<Count();i++)
			Item(i)->Save();
		m_database->Commit();
		return true;
	}
	catch (DatabaseLayerException& e)
	{
		m_database->RollBack();
		wxActiveRecord::ProcessException(e);
		return false;
	}
}


int AuthorsRowSet::CMPFUNC_full_name(wxActiveRecordRow** item1,wxActiveRecordRow** item2){
	AuthorsRow** m_item1=(AuthorsRow**)item1;
	AuthorsRow** m_item2=(AuthorsRow**)item2;
	return (*m_item1)->full_name.Cmp((*m_item2)->full_name);
}

int AuthorsRowSet::CMPFUNC_description(wxActiveRecordRow** item1,wxActiveRecordRow** item2){
	AuthorsRow** m_item1=(AuthorsRow**)item1;
	AuthorsRow** m_item2=(AuthorsRow**)item2;
	return (*m_item1)->description.Cmp((*m_item2)->description);
}

int AuthorsRowSet::CMPFUNC_id(wxActiveRecordRow** item1,wxActiveRecordRow** item2){
	AuthorsRow** m_item1=(AuthorsRow**)item1;
	AuthorsRow** m_item2=(AuthorsRow**)item2;
	if((*m_item1)->id<(*m_item2)->id)
		return -1;
	else if((*m_item1)->id>(*m_item2)->id)
		return 1;
	else
		return 0;
}

int AuthorsRowSet::CMPFUNC_first_name(wxActiveRecordRow** item1,wxActiveRecordRow** item2){
	AuthorsRow** m_item1=(AuthorsRow**)item1;
	AuthorsRow** m_item2=(AuthorsRow**)item2;
	return (*m_item1)->first_name.Cmp((*m_item2)->first_name);
}

int AuthorsRowSet::CMPFUNC_search_name(wxActiveRecordRow** item1,wxActiveRecordRow** item2){
	AuthorsRow** m_item1=(AuthorsRow**)item1;
	AuthorsRow** m_item2=(AuthorsRow**)item2;
	return (*m_item1)->search_name.Cmp((*m_item2)->search_name);
}

int AuthorsRowSet::CMPFUNC_letter(wxActiveRecordRow** item1,wxActiveRecordRow** item2){
	AuthorsRow** m_item1=(AuthorsRow**)item1;
	AuthorsRow** m_item2=(AuthorsRow**)item2;
	return (*m_item1)->letter.Cmp((*m_item2)->letter);
}

int AuthorsRowSet::CMPFUNC_middle_name(wxActiveRecordRow** item1,wxActiveRecordRow** item2){
	AuthorsRow** m_item1=(AuthorsRow**)item1;
	AuthorsRow** m_item2=(AuthorsRow**)item2;
	return (*m_item1)->middle_name.Cmp((*m_item2)->middle_name);
}

int AuthorsRowSet::CMPFUNC_last_name(wxActiveRecordRow** item1,wxActiveRecordRow** item2){
	AuthorsRow** m_item1=(AuthorsRow**)item1;
	AuthorsRow** m_item2=(AuthorsRow**)item2;
	return (*m_item1)->last_name.Cmp((*m_item2)->last_name);
}

CMPFUNC_proto AuthorsRowSet::GetCmpFunc(const wxString& var) const{
	if(var==wxT("full_name"))
		return (CMPFUNC_proto)CMPFUNC_full_name;
	else if(var==wxT("description"))
		return (CMPFUNC_proto)CMPFUNC_description;
	else if(var==wxT("id"))
		return (CMPFUNC_proto)CMPFUNC_id;
	else if(var==wxT("first_name"))
		return (CMPFUNC_proto)CMPFUNC_first_name;
	else if(var==wxT("search_name"))
		return (CMPFUNC_proto)CMPFUNC_search_name;
	else if(var==wxT("letter"))
		return (CMPFUNC_proto)CMPFUNC_letter;
	else if(var==wxT("middle_name"))
		return (CMPFUNC_proto)CMPFUNC_middle_name;
	else if(var==wxT("last_name"))
		return (CMPFUNC_proto)CMPFUNC_last_name;
	else 
	return (CMPFUNC_proto)CMPFUNC_default;
}



/** END ACTIVE RECORD ROW SET **/

////@@begin custom implementations
AuthorsRow* Authors::Name(const wxString& search_name){
	try{
		PreparedStatement* pStatement=m_database->PrepareStatement(wxString::Format(wxT("SELECT * FROM %s WHERE search_name=?"),m_table.c_str()));
		pStatement->SetParamString(1,search_name);
		DatabaseResultSet* result= pStatement->ExecuteQuery();

		if(!result->Next())
			return NULL;
		AuthorsRow* row=RowFromResult(result);
		garbageRows.Add(row);
		m_database->CloseResultSet(result);
		m_database->CloseStatement(pStatement);
		return row;
	}
	catch (DatabaseLayerException& e)
	{
		ProcessException(e);
		return NULL;
	}
}
////@@end custom implementations